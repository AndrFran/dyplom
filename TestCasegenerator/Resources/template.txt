#include <stdarg.h>
#include <stddef.h>
#include <setjmp.h>
#include <string.h>
#include <cmocka.h>

#include "{{filename.h}}"

static int TestID;

static void setup()
{
	switch(TestID)
	{
	{{#testcases}}
		case : {{id}}
		{
			
			break;
		}
	{{/testcases}}
	}
}
static void teardown()
{
	switch(TestID)
	{
	{{#testcases}}
		case : {{id}}
		{
			
			break;
		}
	{{/testcases}}
	}
}
/*Scenario: Some determinable business situation
     Given some precondition
       And some other precondition
     When some action by the actor
      And some other action
       And yet another action
    Then some testable outcome is achieved
      And something else we can check happens too*/
{{#testcases}}
static void test_case_{{function_name}}_{{id}}()
{
	//declare intput arguments
	{{#Arguments}}
	{{type}} {{ispointer}} {{name}} {{isarray}} = {{value}};
	{{/Arguments}}
	TestID = {{id}};
	//call function

	{{#returnchecker}}
	{{function_type}} ret = {{function_name}}({{#Arguments}}{{name}}{{comma}}{{/Arguments}});
	{{/returnchecker}}
	{{^returnchecker}}
	{{function_name}}({{#Arguments}}{{name}},{{/Arguments}});
	{{/returnchecker}}
	{{#AssigmentChecker}}
	{{#Cheker}}
	{{type}} {{ispointer}} {{name}} {{isarray}} = {{value}};
	{{/Cheker}}
	assert_memory_equal({{#ToCheck}}{{name}}{{/ToCheck}},{{#Cheker}}{{name}}{{/Cheker}},sizeof({{#ToCheck}}{{name}}{{/ToCheck}}));
	{{/AssigmentChecker}}
	{{#returnchecker}}
	{{#intcheck}}
	assert_int_equal(ret,{{#ToCheck}}{{Value}}{{/ToCheck}});
	{{/intcheck}}
	{{/returnchecker}}
}
{{/testcases}}

int main(void) {
    const struct CMUnitTest tests[] = {
		{{#testcases}}
	cmocka_unit_test_setup_teardown(
		test_case_{{function_name}}_{{id}},setup,teardown
		)
		{{/testcases}}
		)
    };
    return cmocka_run_group_tests(tests, NULL, NULL);
}
